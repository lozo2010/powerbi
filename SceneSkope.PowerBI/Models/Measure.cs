// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SceneSkope.PowerBI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Measure
    {
        /// <summary>
        /// Initializes a new instance of the Measure class.
        /// </summary>
        public Measure()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Measure class.
        /// </summary>
        /// <param name="name">Name of the measure</param>
        /// <param name="expression">Valid DAX expression</param>
        /// <param name="formatString">A string describing how the value should
        /// be formatted when it is displayed</param>
        /// <param name="isHidden">Is the columne hidden from view</param>
        public Measure(string name, string expression, string formatString = default(string), bool? isHidden = default(bool?))
        {
            Name = name;
            Expression = expression;
            FormatString = formatString;
            IsHidden = isHidden;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the measure
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets valid DAX expression
        /// </summary>
        [JsonProperty(PropertyName = "expression")]
        public string Expression { get; set; }

        /// <summary>
        /// Gets or sets a string describing how the value should be formatted
        /// when it is displayed
        /// </summary>
        [JsonProperty(PropertyName = "formatString")]
        public string FormatString { get; set; }

        /// <summary>
        /// Gets or sets is the columne hidden from view
        /// </summary>
        [JsonProperty(PropertyName = "isHidden")]
        public bool? IsHidden { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Expression == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Expression");
            }
        }
    }
}
